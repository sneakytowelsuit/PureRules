/**
 * JSON serialization support for rules and rule groups.
 *
 * <p>This package provides comprehensive JSON serialization and deserialization capabilities for
 * {@link com.github.sneakytowelsuit.purerules.conditions.Rule} and 
 * {@link com.github.sneakytowelsuit.purerules.conditions.RuleGroup} instances. It enables 
 * external rule management, configuration storage, and dynamic rule loading at runtime.
 *
 * <p><strong>Key Components:</strong>
 * <ul>
 *   <li>{@link com.github.sneakytowelsuit.purerules.serialization.RuleGroupSerde} - 
 *       Main serialization/deserialization API</li>
 *   <li>{@link com.github.sneakytowelsuit.purerules.serialization.RuleGroupSerializer} - 
 *       Low-level rule group serialization logic</li>
 *   <li>{@link com.github.sneakytowelsuit.purerules.serialization.RuleSerializer} - 
 *       Low-level rule serialization logic</li>
 *   <li>{@link com.github.sneakytowelsuit.purerules.serialization.RuleGroupJsonKeys} - 
 *       JSON field name constants</li>
 * </ul>
 *
 * <p><strong>Basic Usage Examples:</strong>
 *
 * <p>Serializing rules to JSON:
 * <pre>{@code
 * // Create a rule group
 * RuleGroup<Person> eligibilityRules = RuleGroup.<Person>builder()
 *     .combinator(Combinator.AND)
 *     .conditions(Arrays.asList(
 *         Rule.<Person, Integer>builder()
 *             .field(new AgeField())
 *             .operator(new GreaterThanOperator<>())
 *             .value(18)
 *             .build(),
 *         Rule.<Person, String>builder()
 *             .field(new CountryField())
 *             .operator(new EqualsOperator<>())
 *             .value("US")
 *             .build()
 *     ))
 *     .build();
 *
 * // Serialize to JSON
 * RuleGroupSerde<Person> serde = new RuleGroupSerde<>();
 * String json = serde.serialize(eligibilityRules);
 * }</pre>
 *
 * <p>Deserializing rules from JSON:
 * <pre>{@code
 * // Load from JSON string or file
 * String jsonConfig = loadFromFile("eligibility-rules.json");
 *
 * // Deserialize back to rule group
 * RuleGroupSerde<Person> serde = new RuleGroupSerde<>();
 * RuleGroup<Person> rules = serde.deserialize(jsonConfig);
 *
 * // Use in engine
 * PureRulesEngine<Person, String> engine = PureRulesEngine
 *     .getDeterministicEngine(Person::getId, Arrays.asList(rules));
 * }</pre>
 *
 * <p><strong>Field and Operator Registration:</strong>
 * Custom field and operator types must be registered with the serializer before use:
 * <pre>{@code
 * RuleGroupSerde<Person> serde = new RuleGroupSerde<>();
 *
 * // Register custom field types
 * serde.registerFieldType("ageField", AgeField.class);
 * serde.registerFieldType("nameField", NameField.class);
 *
 * // Register custom operator types  
 * serde.registerOperatorType("greaterThan", GreaterThanOperator.class);
 * serde.registerOperatorType("contains", ContainsOperator.class);
 *
 * // Now can serialize/deserialize rules using these types
 * String json = serde.serialize(rulesWithCustomTypes);
 * }</pre>
 *
 * <p><strong>Caching and Performance:</strong>
 * The serialization system includes built-in caching for field and operator instances to
 * ensure consistency and improve performance across multiple serialization operations.
 *
 * <p><strong>JSON Format:</strong>
 * The JSON structure follows a predictable schema that can be easily generated by external
 * systems or edited by hand for simple cases:
 * <pre>{@code
 * {
 *   "id": "rule-group-uuid",
 *   "combinator": "AND",
 *   "isInverted": false,
 *   "weight": 1,
 *   "bias": "EXCLUSIVE",
 *   "conditions": [
 *     {
 *       "type": "rule",
 *       "id": "rule-uuid", 
 *       "fieldType": "ageField",
 *       "operatorType": "greaterThan",
 *       "value": 18,
 *       "weight": 1
 *     }
 *   ]
 * }
 * }</pre>
 *
 * <p><strong>Error Handling:</strong>
 * Serialization errors throw specific exceptions from the 
 * {@link com.github.sneakytowelsuit.purerules.exceptions} package with detailed error messages
 * for troubleshooting configuration issues.
 *
 * @see com.github.sneakytowelsuit.purerules.conditions.Rule
 * @see com.github.sneakytowelsuit.purerules.conditions.RuleGroup
 * @see com.github.sneakytowelsuit.purerules.exceptions
 */
package com.github.sneakytowelsuit.purerules.serialization;